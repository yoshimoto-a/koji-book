generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  supabaseUserId    String             @unique @map("supabaseUser_id")
  name              String
  role              UserRole
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  maltArticles      MaltArticle[]
  maltUserActions   MaltUserAction[]
  recipeArticles    RecipeArticle[]
  recipeUserActions RecipeUserAction[]
  recipeComment     RecipeComment[]

  @@map("users")
}

model MaltArticle {
  id                  String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status              Status
  maltRole            MaltRole
  title               String
  temperature         Int
  time                Int
  material            String
  tips                String
  likes               Int              @default(0)
  saves               Int              @default(0)
  userId              String           @db.Uuid
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")
  imageUrl            String?
  mainMaltArticleId   String?          @db.Uuid
  malt_articles       MaltArticle?     @relation("malt_articlesTomalt_articles", fields: [mainMaltArticleId], references: [id], onDelete: Cascade)
  other_malt_articles MaltArticle[]    @relation("malt_articlesTomalt_articles")
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  maltUserActions     MaltUserAction[]
  recipeArticles      RecipeArticle[]

  @@map("malt_articles")
}

model RecipeArticle {
  id                String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status            Status
  title             String
  material          String
  tips              String
  likes             Int                @default(0)
  saves             Int                @default(0)
  userId            String             @db.Uuid
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  maltArticleId     String             @db.Uuid
  imageUrl          String?
  maltArticle       MaltArticle        @relation(fields: [maltArticleId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  RecipeUserActions RecipeUserAction[]
  recipeComment     RecipeComment[]

  @@map("recipe_articles")
}

model MaltUserAction {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String      @db.Uuid
  maltArticleId String      @db.Uuid
  actionType    ActionType
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  maltArticle   MaltArticle @relation(fields: [maltArticleId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, actionType, maltArticleId])
  @@map("malt_user_actions")
}

model RecipeUserAction {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          String        @db.Uuid
  recipeArticleId String        @db.Uuid
  actionType      ActionType
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  recipeArticle   RecipeArticle @relation(fields: [recipeArticleId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, actionType, recipeArticleId])
  @@map("recipe_user_actions")
}

model RecipeComment {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  recipeArticleId      String        @db.Uuid
  userId        String        @db.Uuid
  content       String
  isRead        Boolean       @default(false)
  createdAt     DateTime      @default(now()) @map("created_at")
  recipeArticle   RecipeArticle @relation(fields: [recipeArticleId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId      String?       @db.Uuid @map("parent_id")
  parentComment  RecipeComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       RecipeComment[] @relation("CommentReplies")
  @@map("recipe_comments")
}


enum UserRole {
  MEMBER
  ADMIN
}

enum Status {
  DRAFT
  PUBLIC
  PENDING_APPROVAL
}

enum MaltRole {
  MAIN
  SUB
}

enum ActionType {
  LIKE
  SAVE
}
