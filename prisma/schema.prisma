generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  supabaseUserId String          @unique @map("supabaseUser_id")
  name           String
  role           UserRole
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  maltArticles   MaltArticle[]
  recipeArticles RecipeArticle[]
  maltUserActions    MaltUserAction[]
  recipeUserActions  RecipeUserAction[]
  @@map("users")
}

model MaltArticle {
  id             String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status         Status
  maltRole       MaltRole
  title          String
  temperature    Int
  time           Int
  material       String
  tips           String
  likes          Int             @default(0)
  saves          Int             @default(0)
  userId         String          @db.Uuid
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeArticles RecipeArticle[] 
  maltUserActions    MaltUserAction[] 

  @@map("malt_articles")
}

model RecipeArticle {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status        Status
  title         String
  material      String
  tips          String
  likes         Int          @default(0)
  saves         Int          @default(0)
  userId        String       @db.Uuid
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  maltArticleId String       @db.Uuid
  maltArticle   MaltArticle  @relation(fields: [maltArticleId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  RecipeUserActions   RecipeUserAction[] 

  @@map("recipe_articles")
}

model MaltUserAction {
  id              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          String          @db.Uuid
  maltArticleId   String         @db.Uuid
  actionType      ActionType
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  maltArticle MaltArticle @relation(fields: [maltArticleId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("malt_user_actions")
  @@unique([userId, actionType, maltArticleId])
}
model RecipeUserAction {
  id              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          String          @db.Uuid
  recipeArticleId String          @db.Uuid
  actionType      ActionType
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  recipeArticle   RecipeArticle  @relation(fields: [recipeArticleId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recipe_user_actions")
  @@unique([userId, actionType, recipeArticleId])
}

enum UserRole {
  MEMBER
  ADMIN
}

enum Status {
  DRAFT
  PUBLIC
}

enum MaltRole {
  MAIN
  SUB
}

enum ActionType {
  LIKE
  SAVE
}
